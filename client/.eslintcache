[{"/home/alexandr/WebstormProjects/LoadBalancer/client/src/utils/routes.js":"1","/home/alexandr/WebstormProjects/LoadBalancer/client/src/index.js":"2","/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/app/index.jsx":"3","/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/RegisterPage/index.jsx":"4","/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/AccountPage/index.jsx":"5","/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/TaskItem/index.jsx":"6","/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/Page/index.jsx":"7","/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/NavBar/index.jsx":"8","/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/AuthForm/index.jsx":"9","/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/LoginPage/index.jsx":"10","/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/HomePage/index.jsx":"11"},{"size":123,"mtime":1607640535781,"results":"12","hashOfConfig":"13"},{"size":271,"mtime":1607639242880,"results":"14","hashOfConfig":"13"},{"size":754,"mtime":1608131922483,"results":"15","hashOfConfig":"13"},{"size":1734,"mtime":1607639529590,"results":"16","hashOfConfig":"13"},{"size":4975,"mtime":1607662672512,"results":"17","hashOfConfig":"13"},{"size":778,"mtime":1608133414179,"results":"18","hashOfConfig":"13"},{"size":3552,"mtime":1607640862463,"results":"19","hashOfConfig":"13"},{"size":943,"mtime":1607640330311,"results":"20","hashOfConfig":"13"},{"size":1396,"mtime":1607638425848,"results":"21","hashOfConfig":"13"},{"size":1283,"mtime":1607638879226,"results":"22","hashOfConfig":"13"},{"size":119,"mtime":1607637909256,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1d63l84",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/home/alexandr/WebstormProjects/LoadBalancer/client/src/utils/routes.js",[],["52","53"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/index.js",[],["54","55"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/app/index.jsx",["56"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/RegisterPage/index.jsx",[],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/AccountPage/index.jsx",["57"],"import React, { useState } from 'react';\nimport useInterval from 'use-interval';\nimport {\n  Dimmer,\n  Grid,\n  Loader,\n  Page as TablerPage,\n  Form,\n  Card,\n  Button,\n  Table,\n} from 'tabler-react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport Page from '../../components/Page';\nimport FormInput from '../../components/FormInput';\n// import { useTaskCreate, useTasksAll } from '../../hooks/api/task';\nimport TaskItem from '../../components/TaskItem';\n\n// import './index.scss';\n\nconst INPUTS = [\n  {\n    label: 'NUMBER',\n    name: 'number',\n    type: 'number',\n    placeholder: 'NUMBER',\n    min: 1,\n    max: 64,\n    validation: {\n      required: 'Please enter balancer-number',\n      min: {\n        value: 1,\n        message: 'Number should be at least 1',\n      },\n      max: {\n        value: 15000,\n        message: 'Number less or equal 15000',\n      },\n    },\n  },\n];\n\nconst tasks = [];\n\nconst AccountPage = () => {\n  // const { data: { data: tasks = [] } = {}, isSuccess, refetch } = useTasksAll({\n  //   refetchInterval: 5000,\n  // });\n  // const [createTask, { isLoading }] = useTaskCreate();\n  const [tasks, setTasks] = useState([]);\n  const form = useForm({\n    mode: 'onSubmit',\n    reValidateMode: 'onChange',\n    defaultValues: {\n      hardness: 8,\n    },\n  });\n  const { handleSubmit } = form;\n  const submit = ({number}) => {\n    fetch(`http://localhost:5000/calc?number=${number}`, {\n      method: 'POST',\n    });\n    // await createTask(task);\n    // await refetch();\n  };\n\n  useInterval(() => {\n    fetch(`http://localhost:5000/tasks`)\n      .then((res) => res.json())\n      .then(res => setTasks(res));\n  }, 1000);\n\n  return (\n    <Page>\n      <Dimmer active={false} loader={<Loader />}>\n        <TablerPage.Content>\n          <Grid.Row justifyContent=\"center\">\n            <Grid.Col width={4}>\n              <Form\n                autocomplete=\"off\"\n                className=\"card\"\n                onSubmit={handleSubmit(submit)}\n              >\n                <FormProvider {...form}>\n                  <input type=\"hidden\" value=\"something\" />\n                  <Card.Body className=\"p-4 p-md-5 p-xl-6\">\n                    <Grid.Row>\n                      <Grid.Col\n                        width={12}\n                        className=\"d-flex flex-column justify-content-center\"\n                      >\n                        <Card.Title RootComponent=\"div\">\n                          Create new task\n                        </Card.Title>\n                        <div className=\"d-flex flex-column align-items-end flex-md-row\">\n                          {INPUTS.map(\n                            (\n                              { type, name, label, placeholder, validation },\n                              i,\n                            ) => (\n                              <FormInput\n                                key={i}\n                                type={type}\n                                name={name}\n                                label={label}\n                                placeholder={placeholder}\n                                validation={validation}\n                                wrapperClassName=\"mr-0 mr-md-3 mb-4 mb-md-0\"\n                              />\n                            ),\n                          )}\n                          <Button\n                            className=\"\"\n                            type=\"submit\"\n                            color=\"primary\"\n                            outline\n                          >\n                            Start\n                          </Button>\n                        </div>\n                      </Grid.Col>\n                    </Grid.Row>\n                  </Card.Body>\n                </FormProvider>\n              </Form>\n            </Grid.Col>\n            <Grid.Col width={8}>\n              <Table cards responsive highlightRowOnHover className=\"table-vcenter\">\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>ID</Table.ColHeader>\n                    <Table.ColHeader>NUMBER</Table.ColHeader>\n                    <Table.ColHeader>STATUS</Table.ColHeader>\n                    <Table.ColHeader>PORT</Table.ColHeader>\n                    <Table.ColHeader>TIME</Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {tasks.map(({ id, number, status, workerPort, time },) => (\n                    <TaskItem\n                      id={id}\n                      key={id}\n                      number={number}\n                      time={time}\n                      workerPort={workerPort}\n                      status={status}\n                      // onDelete={() => refetch()}\n                    />\n                  ))}\n                </Table.Body>\n              </Table>\n            </Grid.Col>\n          </Grid.Row>\n        </TablerPage.Content>\n      </Dimmer>\n    </Page>\n  );\n};\n\nexport default AccountPage;","/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/TaskItem/index.jsx",["58","59","60","61","62","63","64"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/Page/index.jsx",["65","66","67","68","69"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/NavBar/index.jsx",[],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/components/AuthForm/index.jsx",[],["70","71"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/LoginPage/index.jsx",["72"],"import React from \"react\";\nimport { StandaloneFormPage } from 'tabler-react';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport logo from '../../logo.svg';\n\nimport AuthForm from '../../components/AuthForm';\nimport ROUTES from '../../utils/routes';\n\nconst INPUTS = [\n  {\n    label: 'Login',\n    name: 'login',\n    placeholder: 'login',\n    type: 'text',\n    validation: {\n      required: 'Please enter a login',\n    },\n  },\n  {\n    label: 'Password',\n    name: 'password',\n    type: 'password',\n    placeholder: 'password',\n    validation: {\n      required: 'Please enter a password',\n    },\n  },\n];\n\nfunction LoginPage(props) {\n  const history = useHistory();\n  const onSubmit = async (form) => {\n    try {\n      console.log(form);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <StandaloneFormPage imageURL={logo}>\n      <AuthForm\n        inputs={INPUTS}\n        title=\"Login to your Account\"\n        buttonText=\"Login\"\n        onSubmit={onSubmit}\n        formAfter={\n          <>\n            <div className=\"mt-2\">\n              <br />\n              Don&apos;t have an account?{' '}\n              <Link to={ROUTES.REGISTER}>Sign up</Link>\n            </div>\n          </>\n        }\n      />\n    </StandaloneFormPage>\n  );\n}\n\nexport default LoginPage;",["73","74"],"/home/alexandr/WebstormProjects/LoadBalancer/client/src/pages/HomePage/index.jsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"79"},{"ruleId":"77","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":16},{"ruleId":"81","severity":1,"message":"85","line":44,"column":7,"nodeType":"83","messageId":"84","endLine":44,"endColumn":12},{"ruleId":"81","severity":1,"message":"86","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"87","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"88","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":16},{"ruleId":"81","severity":1,"message":"89","line":3,"column":18,"nodeType":"83","messageId":"84","endLine":3,"endColumn":23},{"ruleId":"81","severity":1,"message":"90","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":10},{"ruleId":"81","severity":1,"message":"91","line":16,"column":9,"nodeType":"83","messageId":"84","endLine":16,"endColumn":22},{"ruleId":"81","severity":1,"message":"92","line":17,"column":9,"nodeType":"83","messageId":"84","endLine":17,"endColumn":23},{"ruleId":"81","severity":1,"message":"93","line":3,"column":3,"nodeType":"83","messageId":"84","endLine":3,"endColumn":13},{"ruleId":"81","severity":1,"message":"94","line":4,"column":3,"nodeType":"83","messageId":"84","endLine":4,"endColumn":20},{"ruleId":"81","severity":1,"message":"95","line":5,"column":3,"nodeType":"83","messageId":"84","endLine":5,"endColumn":14},{"ruleId":"81","severity":1,"message":"96","line":7,"column":16,"nodeType":"83","messageId":"84","endLine":7,"endColumn":27},{"ruleId":"81","severity":1,"message":"97","line":20,"column":7,"nodeType":"83","messageId":"84","endLine":20,"endColumn":20},{"ruleId":"75","replacedBy":"98"},{"ruleId":"77","replacedBy":"99"},{"ruleId":"81","severity":1,"message":"100","line":32,"column":9,"nodeType":"83","messageId":"84","endLine":32,"endColumn":16},{"ruleId":"75","replacedBy":"101"},{"ruleId":"77","replacedBy":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],["103"],["104"],"no-unused-vars","'HomePage' is defined but never used.","Identifier","unusedVar","'tasks' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'Badge' is defined but never used.","'cn' is defined but never used.","'baseClassName' is assigned a value but never used.","'getStatusColor' is assigned a value but never used.","'useContext' is defined but never used.","'PropsWithChildren' is defined but never used.","'ElementType' is defined but never used.","'useLocation' is defined but never used.","'newNavBarItem' is assigned a value but never used.",["103"],["104"],"'history' is assigned a value but never used.",["103"],["104"],"no-global-assign","no-unsafe-negation"]